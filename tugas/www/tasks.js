(()=>{var e={819:(e,t,n)=>{"use strict";function r(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw Error("[Immer] minified error nr: "+e+(n.length?" "+n.map((function(e){return"'"+e+"'"})).join(","):"")+". Find the full error at: https://bit.ly/3cXEKWf")}function o(e){return!!e&&!!e[q]}function i(e){return!!e&&(function(e){if(!e||"object"!=typeof e)return!1;var t=Object.getPrototypeOf(e);return!t||t===Object.prototype}(e)||Array.isArray(e)||!!e[V]||!!e.constructor[V]||l(e)||d(e))}function a(e,t,n){void 0===n&&(n=!1),0===u(e)?(n?Object.keys:z)(e).forEach((function(r){n&&"symbol"==typeof r||t(r,e[r],e)})):e.forEach((function(n,r){return t(r,n,e)}))}function u(e){var t=e[q];return t?t.i>3?t.i-4:t.i:Array.isArray(e)?1:l(e)?2:d(e)?3:0}function c(e,t){return 2===u(e)?e.has(t):Object.prototype.hasOwnProperty.call(e,t)}function f(e,t,n){var r=u(e);2===r?e.set(t,n):3===r?(e.delete(t),e.add(n)):e[t]=n}function s(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}function l(e){return W&&e instanceof Map}function d(e){return B&&e instanceof Set}function p(e){return e.o||e.t}function y(e){if(Array.isArray(e))return Array.prototype.slice.call(e);var t=K(e);delete t[q];for(var n=z(t),r=0;r<n.length;r++){var o=n[r],i=t[o];!1===i.writable&&(i.writable=!0,i.configurable=!0),(i.get||i.set)&&(t[o]={configurable:!0,writable:!0,enumerable:i.enumerable,value:e[o]})}return Object.create(Object.getPrototypeOf(e),t)}function h(e,t){return void 0===t&&(t=!1),b(e)||o(e)||!i(e)||(u(e)>1&&(e.set=e.add=e.clear=e.delete=v),Object.freeze(e),t&&a(e,(function(e,t){return h(t,!0)}),!0)),e}function v(){r(2)}function b(e){return null==e||"object"!=typeof e||Object.isFrozen(e)}function g(e){var t=H[e];return t||r(18,e),t}function m(){return L}function w(e,t){t&&(g("Patches"),e.u=[],e.s=[],e.v=t)}function A(e){O(e),e.p.forEach(E),e.p=null}function O(e){e===L&&(L=e.l)}function j(e){return L={p:[],l:L,h:e,m:!0,_:0}}function E(e){var t=e[q];0===t.i||1===t.i?t.j():t.g=!0}function S(e,t){t._=t.p.length;var n=t.p[0],o=void 0!==e&&e!==n;return t.h.O||g("ES5").S(t,e,o),o?(n[q].P&&(A(t),r(4)),i(e)&&(e=P(t,e),t.l||x(t,e)),t.u&&g("Patches").M(n[q],e,t.u,t.s)):e=P(t,n,[]),A(t),t.u&&t.v(t.u,t.s),e!==F?e:void 0}function P(e,t,n){if(b(t))return t;var r=t[q];if(!r)return a(t,(function(o,i){return k(e,r,t,o,i,n)}),!0),t;if(r.A!==e)return t;if(!r.P)return x(e,r.t,!0),r.t;if(!r.I){r.I=!0,r.A._--;var o=4===r.i||5===r.i?r.o=y(r.k):r.o;a(3===r.i?new Set(o):o,(function(t,i){return k(e,r,o,t,i,n)})),x(e,o,!1),n&&e.u&&g("Patches").R(r,n,e.u,e.s)}return r.o}function k(e,t,n,r,a,u){if(o(a)){var s=P(e,a,u&&t&&3!==t.i&&!c(t.D,r)?u.concat(r):void 0);if(f(n,r,s),!o(s))return;e.m=!1}if(i(a)&&!b(a)){if(!e.h.N&&e._<1)return;P(e,a),t&&t.A.l||x(e,a)}}function x(e,t,n){void 0===n&&(n=!1),e.h.N&&e.m&&h(t,n)}function I(e,t){var n=e[q];return(n?p(n):e)[t]}function R(e,t){if(t in e)for(var n=Object.getPrototypeOf(e);n;){var r=Object.getOwnPropertyDescriptor(n,t);if(r)return r;n=Object.getPrototypeOf(n)}}function _(e){e.P||(e.P=!0,e.l&&_(e.l))}function C(e){e.o||(e.o=y(e.t))}function T(e,t,n){var r=l(t)?g("MapSet").T(t,n):d(t)?g("MapSet").F(t,n):e.O?function(e,t){var n=Array.isArray(e),r={i:n?1:0,A:t?t.A:m(),P:!1,I:!1,D:{},l:t,t:e,k:null,o:null,j:null,C:!1},o=r,i=Z;n&&(o=[r],i=J);var a=Proxy.revocable(o,i),u=a.revoke,c=a.proxy;return r.k=c,r.j=u,c}(t,n):g("ES5").J(t,n);return(n?n.A:m()).p.push(r),r}function M(e){return o(e)||r(22,e),function e(t){if(!i(t))return t;var n,r=t[q],o=u(t);if(r){if(!r.P&&(r.i<4||!g("ES5").K(r)))return r.t;r.I=!0,n=D(t,o),r.I=!1}else n=D(t,o);return a(n,(function(t,o){r&&function(e,t){return 2===u(e)?e.get(t):e[t]}(r.t,t)===o||f(n,t,e(o))})),3===o?new Set(n):n}(e)}function D(e,t){switch(t){case 2:return new Map(e);case 3:return Array.from(e)}return y(e)}n.r(t),n.d(t,{MiddlewareArray:()=>ke,__DO_NOT_USE__ActionTypes:()=>te,applyMiddleware:()=>de,bindActionCreators:()=>ue,combineReducers:()=>ie,compose:()=>le,configureStore:()=>Me,createAction:()=>De,createAsyncThunk:()=>Je,createDraftSafeSelector:()=>ge,createEntityAdapter:()=>qe,createImmutableStateInvariantMiddleware:()=>Ie,createNextState:()=>G,createReducer:()=>We,createSelector:()=>ve,createSerializableStateInvariantMiddleware:()=>Ce,createSlice:()=>Be,createStore:()=>re,current:()=>M,findNonSerializableValue:()=>_e,freeze:()=>h,getDefaultMiddleware:()=>Te,getType:()=>Le,isAllOf:()=>Qe,isAnyOf:()=>Ge,isAsyncThunkAction:()=>at,isFulfilled:()=>it,isImmutableDefault:()=>xe,isPending:()=>nt,isPlain:()=>Re,isPlainObject:()=>Pe,isRejected:()=>rt,isRejectedWithValue:()=>ot,nanoid:()=>ze,unwrapResult:()=>Xe});var N,L,U="undefined"!=typeof Symbol&&"symbol"==typeof Symbol("x"),W="undefined"!=typeof Map,B="undefined"!=typeof Set,$="undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,F=U?Symbol.for("immer-nothing"):((N={})["immer-nothing"]=!0,N),V=U?Symbol.for("immer-draftable"):"__$immer_draftable",q=U?Symbol.for("immer-state"):"__$immer_state",z=("undefined"!=typeof Symbol&&Symbol.iterator,"undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:Object.getOwnPropertyNames),K=Object.getOwnPropertyDescriptors||function(e){var t={};return z(e).forEach((function(n){t[n]=Object.getOwnPropertyDescriptor(e,n)})),t},H={},Z={get:function(e,t){if(t===q)return e;var n=p(e);if(!c(n,t))return function(e,t,n){var r,o=R(t,n);return o?"value"in o?o.value:null===(r=o.get)||void 0===r?void 0:r.call(e.k):void 0}(e,n,t);var r=n[t];return e.I||!i(r)?r:r===I(e.t,t)?(C(e),e.o[t]=T(e.A.h,r,e)):r},has:function(e,t){return t in p(e)},ownKeys:function(e){return Reflect.ownKeys(p(e))},set:function(e,t,n){var r=R(p(e),t);if(null==r?void 0:r.set)return r.set.call(e.k,n),!0;if(!e.P){var o=I(p(e),t),i=null==o?void 0:o[q];if(i&&i.t===n)return e.o[t]=n,e.D[t]=!1,!0;if(s(n,o)&&(void 0!==n||c(e.t,t)))return!0;C(e),_(e)}return e.o[t]=n,e.D[t]=!0,!0},deleteProperty:function(e,t){return void 0!==I(e.t,t)||t in e.t?(e.D[t]=!1,C(e),_(e)):delete e.D[t],e.o&&delete e.o[t],!0},getOwnPropertyDescriptor:function(e,t){var n=p(e),r=Reflect.getOwnPropertyDescriptor(n,t);return r?{writable:!0,configurable:1!==e.i||"length"!==t,enumerable:r.enumerable,value:n[t]}:r},defineProperty:function(){r(11)},getPrototypeOf:function(e){return Object.getPrototypeOf(e.t)},setPrototypeOf:function(){r(12)}},J={};a(Z,(function(e,t){J[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),J.deleteProperty=function(e,t){return Z.deleteProperty.call(this,e[0],t)},J.set=function(e,t,n){return Z.set.call(this,e[0],t,n,e[0])};var X=new(function(){function e(e){this.O=$,this.N=!0,"boolean"==typeof(null==e?void 0:e.useProxies)&&this.setUseProxies(e.useProxies),"boolean"==typeof(null==e?void 0:e.autoFreeze)&&this.setAutoFreeze(e.autoFreeze),this.produce=this.produce.bind(this),this.produceWithPatches=this.produceWithPatches.bind(this)}var t=e.prototype;return t.produce=function(e,t,n){if("function"==typeof e&&"function"!=typeof t){var o=t;t=e;var a=this;return function(e){var n=this;void 0===e&&(e=o);for(var r=arguments.length,i=Array(r>1?r-1:0),u=1;u<r;u++)i[u-1]=arguments[u];return a.produce(e,(function(e){var r;return(r=t).call.apply(r,[n,e].concat(i))}))}}var u;if("function"!=typeof t&&r(6),void 0!==n&&"function"!=typeof n&&r(7),i(e)){var c=j(this),f=T(this,e,void 0),s=!0;try{u=t(f),s=!1}finally{s?A(c):O(c)}return"undefined"!=typeof Promise&&u instanceof Promise?u.then((function(e){return w(c,n),S(e,c)}),(function(e){throw A(c),e})):(w(c,n),S(u,c))}if(!e||"object"!=typeof e){if((u=t(e))===F)return;return void 0===u&&(u=e),this.N&&h(u,!0),u}r(21,e)},t.produceWithPatches=function(e,t){var n,r,o=this;return"function"==typeof e?function(t){for(var n=arguments.length,r=Array(n>1?n-1:0),i=1;i<n;i++)r[i-1]=arguments[i];return o.produceWithPatches(t,(function(t){return e.apply(void 0,[t].concat(r))}))}:[this.produce(e,t,(function(e,t){n=e,r=t})),n,r]},t.createDraft=function(e){i(e)||r(8),o(e)&&(e=M(e));var t=j(this),n=T(this,e,void 0);return n[q].C=!0,O(t),n},t.finishDraft=function(e,t){var n=(e&&e[q]).A;return w(n,t),S(void 0,n)},t.setAutoFreeze=function(e){this.N=e},t.setUseProxies=function(e){e&&!$&&r(20),this.O=e},t.applyPatches=function(e,t){var n;for(n=t.length-1;n>=0;n--){var r=t[n];if(0===r.path.length&&"replace"===r.op){e=r.value;break}}var i=g("Patches").$;return o(e)?i(e,t):this.produce(e,(function(e){return i(e,t.slice(n+1))}))},e}()),Y=X.produce;X.produceWithPatches.bind(X),X.setAutoFreeze.bind(X),X.setUseProxies.bind(X),X.applyPatches.bind(X),X.createDraft.bind(X),X.finishDraft.bind(X);const G=Y;var Q=n(121),ee=function(){return Math.random().toString(36).substring(7).split("").join(".")},te={INIT:"@@redux/INIT"+ee(),REPLACE:"@@redux/REPLACE"+ee(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+ee()}};function ne(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function re(e,t,n){var r;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(re)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var o=e,i=t,a=[],u=a,c=!1;function f(){u===a&&(u=a.slice())}function s(){if(c)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return i}function l(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(c)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribelistener for more details.");var t=!0;return f(),u.push(e),function(){if(t){if(c)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribelistener for more details.");t=!1,f();var n=u.indexOf(e);u.splice(n,1),a=null}}}function d(e){if(!ne(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(c)throw new Error("Reducers may not dispatch actions.");try{c=!0,i=o(i,e)}finally{c=!1}for(var t=a=u,n=0;n<t.length;n++)(0,t[n])();return e}function p(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");o=e,d({type:te.REPLACE})}function y(){var e,t=l;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(s())}return n(),{unsubscribe:t(n)}}})[Q.Z]=function(){return this},e}return d({type:te.INIT}),(r={dispatch:d,subscribe:l,getState:s,replaceReducer:p})[Q.Z]=y,r}function oe(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function ie(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];"function"==typeof e[o]&&(n[o]=e[o])}var i,a=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:te.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:te.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+te.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(n)}catch(e){i=e}return function(e,t){if(void 0===e&&(e={}),i)throw i;for(var r=!1,o={},u=0;u<a.length;u++){var c=a[u],f=n[c],s=e[c],l=f(s,t);if(void 0===l){var d=oe(c,t);throw new Error(d)}o[c]=l,r=r||l!==s}return(r=r||a.length!==Object.keys(e).length)?o:e}}function ae(e,t){return function(){return t(e.apply(this,arguments))}}function ue(e,t){if("function"==typeof e)return ae(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var n={};for(var r in e){var o=e[r];"function"==typeof o&&(n[r]=ae(o,t))}return n}function ce(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function fe(e,t){var n=Object.keys(e);return Object.getOwnPropertySymbols&&n.push.apply(n,Object.getOwnPropertySymbols(e)),t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n}function se(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?fe(n,!0).forEach((function(t){ce(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):fe(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function le(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function de(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},i=t.map((function(e){return e(o)}));return se({},n,{dispatch:r=le.apply(void 0,i)(n.dispatch)})}}}function pe(e,t){return e===t}function ye(e,t,n){if(null===t||null===n||t.length!==n.length)return!1;for(var r=t.length,o=0;o<r;o++)if(!e(t[o],n[o]))return!1;return!0}function he(e){var t=Array.isArray(e[0])?e[0]:e;if(!t.every((function(e){return"function"==typeof e}))){var n=t.map((function(e){return typeof e})).join(", ");throw new Error("Selector creators expect all input-selectors to be functions, instead received the following types: ["+n+"]")}return t}var ve=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return function(){for(var t=arguments.length,r=Array(t),o=0;o<t;o++)r[o]=arguments[o];var i=0,a=r.pop(),u=he(r),c=e.apply(void 0,[function(){return i++,a.apply(null,arguments)}].concat(n)),f=e((function(){for(var e=[],t=u.length,n=0;n<t;n++)e.push(u[n].apply(null,arguments));return c.apply(null,e)}));return f.resultFunc=a,f.dependencies=u,f.recomputations=function(){return i},f.resetRecomputations=function(){return i=0},f}}((function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:pe,n=null,r=null;return function(){return ye(t,n,arguments)||(r=e.apply(null,arguments)),n=arguments,r}})),be=n(894),ge=function(){var e=ve.apply(void 0,arguments),t=function(t){for(var n=arguments.length,r=new Array(n>1?n-1:0),i=1;i<n;i++)r[i-1]=arguments[i];return e.apply(void 0,[o(t)?M(t):t].concat(r))};return t};function me(){return(me=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function we(e){return(we=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Ae(e,t){return(Ae=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Oe(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function je(e,t,n){return(je=Oe()?Reflect.construct:function(e,t,n){var r=[null];r.push.apply(r,t);var o=new(Function.bind.apply(e,r));return n&&Ae(o,n.prototype),o}).apply(null,arguments)}function Ee(e){var t="function"==typeof Map?new Map:void 0;return(Ee=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf("[native code]")))return e;var n;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,r)}function r(){return je(e,arguments,we(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),Ae(r,e)})(e)}var Se="undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:function(){if(0!==arguments.length)return"object"==typeof arguments[0]?le:le.apply(null,arguments)};function Pe(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}var ke=function(e){var t,n;function r(){return e.apply(this,arguments)||this}n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var o=r.prototype;return o.concat=function(){for(var t,n=arguments.length,o=new Array(n),i=0;i<n;i++)o[i]=arguments[i];return je(r,(t=e.prototype.concat).call.apply(t,[this].concat(o)))},o.prepend=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 1===t.length&&Array.isArray(t[0])?je(r,t[0].concat(this)):je(r,t.concat(this))},r}(Ee(Array));function xe(e){return"object"!=typeof e||null==e}function Ie(e){return void 0===e&&(e={}),function(){return function(e){return function(t){return e(t)}}}}function Re(e){return null==e||"string"==typeof e||"boolean"==typeof e||"number"==typeof e||Array.isArray(e)||Pe(e)}function _e(e,t,n,r,o){var i;if(void 0===t&&(t=[]),void 0===n&&(n=Re),void 0===o&&(o=[]),!n(e))return{keyPath:t.join(".")||"<root>",value:e};if("object"!=typeof e||null===e)return!1;var a=null!=r?r(e):Object.entries(e),u=o.length>0,c=a,f=Array.isArray(c),s=0;for(c=f?c:c[Symbol.iterator]();;){var l;if(f){if(s>=c.length)break;l=c[s++]}else{if((s=c.next()).done)break;l=s.value}var d=l,p=d[0],y=d[1],h=t.concat(p);if(!(u&&o.indexOf(h.join("."))>=0)){if(!n(y))return{keyPath:h.join("."),value:y};if("object"==typeof y&&(i=_e(y,h,n,r,o)))return i}}return!1}function Ce(e){return void 0===e&&(e={}),function(){return function(e){return function(t){return e(t)}}}}function Te(e){void 0===e&&(e={});var t=e,n=t.thunk,r=void 0===n||n,o=(t.immutableCheck,t.serializableCheck,new ke);return r&&(function(e){return"boolean"==typeof e}(r)?o.push(be.default):o.push(be.default.withExtraArgument(r.extraArgument))),o}function Me(e){var t,n=function(e){return Te(e)},r=e||{},o=r.reducer,i=void 0===o?void 0:o,a=r.middleware,u=void 0===a?n():a,c=r.devTools,f=void 0===c||c,s=r.preloadedState,l=void 0===s?void 0:s,d=r.enhancers,p=void 0===d?void 0:d;if("function"==typeof i)t=i;else{if(!Pe(i))throw new Error('"reducer" is a required argument, and must be a function or an object of functions that can be passed to combineReducers');t=ie(i)}var y=de.apply(void 0,"function"==typeof u?u(n):u),h=le;f&&(h=Se(me({trace:!1},"object"==typeof f&&f)));var v=[y];return Array.isArray(p)?v=[y].concat(p):"function"==typeof p&&(v=p(v)),re(t,l,h.apply(void 0,v))}function De(e,t){function n(){if(t){var n=t.apply(void 0,arguments);if(!n)throw new Error("prepareAction did not return an object");return me({type:e,payload:n.payload},"meta"in n&&{meta:n.meta},{},"error"in n&&{error:n.error})}return{type:e,payload:arguments.length<=0?void 0:arguments[0]}}return n.toString=function(){return""+e},n.type=e,n.match=function(t){return t.type===e},n}function Ne(e){return["type","payload","error","meta"].indexOf(e)>-1}function Le(e){return""+e}function Ue(e){var t,n={},r=[],o={addCase:function(e,t){var r="string"==typeof e?e:e.type;if(r in n)throw new Error("addCase cannot be called with two reducers for the same action type");return n[r]=t,o},addMatcher:function(e,t){return r.push({matcher:e,reducer:t}),o},addDefaultCase:function(e){return t=e,o}};return e(o),[n,r,t]}function We(e,t,n,r){void 0===n&&(n=[]);var a="function"==typeof t?Ue(t):[t,n,r],u=a[0],c=a[1],f=a[2];return function(t,n){void 0===t&&(t=e);var r=[u[n.type]].concat(c.filter((function(e){return(0,e.matcher)(n)})).map((function(e){return e.reducer})));return 0===r.filter((function(e){return!!e})).length&&(r=[f]),r.reduce((function(e,t){if(t){if(o(e)){var r=t(e,n);return void 0===r?e:r}if(i(e))return G(e,(function(e){return t(e,n)}));var a=t(e,n);if(void 0===a){if(null===e)return e;throw Error("A case reducer on a non-draftable value must not return undefined")}return a}return e}),t)}}function Be(e){var t=e.name,n=e.initialState;if(!t)throw new Error("`name` is a required option for createSlice");var r=e.reducers||{},o=void 0===e.extraReducers?[]:"function"==typeof e.extraReducers?Ue(e.extraReducers):[e.extraReducers],i=o[0],a=void 0===i?{}:i,u=o[1],c=void 0===u?[]:u,f=o[2],s=void 0===f?void 0:f,l=Object.keys(r),d={},p={},y={};l.forEach((function(e){var n,o,i=r[e],a=t+"/"+e;"reducer"in i?(n=i.reducer,o=i.prepare):n=i,d[e]=n,p[a]=n,y[e]=o?De(a,o):De(a)}));var h=We(n,me({},a,{},p),c,s);return{name:t,reducer:h,actions:y,caseReducers:d}}function $e(e){return function(t,n){var r=function(t){!function(e){return Pe(t=e)&&"string"==typeof t.type&&Object.keys(t).every(Ne);var t}(n)?e(n,t):e(n.payload,t)};return o(t)?(r(t),t):G(t,r)}}function Fe(e,t){return t(e)}function Ve(e){function t(t,n){var r=Fe(t,e);r in n.entities||(n.ids.push(r),n.entities[r]=t)}function n(e,n){Array.isArray(e)||(e=Object.values(e));var r=e,o=Array.isArray(r),i=0;for(r=o?r:r[Symbol.iterator]();;){var a;if(o){if(i>=r.length)break;a=r[i++]}else{if((i=r.next()).done)break;a=i.value}t(a,n)}}function r(e,t){var n=!1;e.forEach((function(e){e in t.entities&&(delete t.entities[e],n=!0)})),n&&(t.ids=t.ids.filter((function(e){return e in t.entities})))}function o(t,n){var r={},o={};t.forEach((function(e){e.id in n.entities&&(o[e.id]={id:e.id,changes:me({},o[e.id]?o[e.id].changes:null,{},e.changes)})})),(t=Object.values(o)).length>0&&t.filter((function(t){return function(t,n,r){var o=r.entities[n.id],i=Object.assign({},o,n.changes),a=Fe(i,e),u=a!==n.id;return u&&(t[n.id]=a,delete r.entities[n.id]),r.entities[a]=i,u}(r,t,n)})).length>0&&(n.ids=n.ids.map((function(e){return r[e]||e})))}function i(t,r){Array.isArray(t)||(t=Object.values(t));var i=[],a=[],u=t,c=Array.isArray(u),f=0;for(u=c?u:u[Symbol.iterator]();;){var s;if(c){if(f>=u.length)break;s=u[f++]}else{if((f=u.next()).done)break;s=f.value}var l=s,d=Fe(l,e);d in r.entities?a.push({id:d,changes:l}):i.push(l)}o(a,r),n(i,r)}return{removeAll:(a=function(e){Object.assign(e,{ids:[],entities:{}})},u=$e((function(e,t){return a(t)})),function(e){return u(e,void 0)}),addOne:$e(t),addMany:$e(n),setAll:$e((function(e,t){Array.isArray(e)||(e=Object.values(e)),t.ids=[],t.entities={},n(e,t)})),updateOne:$e((function(e,t){return o([e],t)})),updateMany:$e(o),upsertOne:$e((function(e,t){return i([e],t)})),upsertMany:$e(i),removeOne:$e((function(e,t){return r([e],t)})),removeMany:$e(r)};var a,u}function qe(e){void 0===e&&(e={});var t=me({sortComparer:!1,selectId:function(e){return e.id}},e),n=t.selectId,r=t.sortComparer;return me({selectId:n,sortComparer:r},{getInitialState:function(e){return void 0===e&&(e={}),Object.assign({ids:[],entities:{}},e)}},{},{getSelectors:function(e){var t=function(e){return e.ids},n=function(e){return e.entities},r=ge(t,n,(function(e,t){return e.map((function(e){return t[e]}))})),o=function(e,t){return t},i=function(e,t){return e[t]},a=ge(t,(function(e){return e.length}));if(!e)return{selectIds:t,selectEntities:n,selectAll:r,selectTotal:a,selectById:ge(n,o,i)};var u=ge(e,n);return{selectIds:ge(e,t),selectEntities:u,selectAll:ge(e,r),selectTotal:ge(e,a),selectById:ge(u,o,i)}}},{},r?function(e,t){var n=Ve(e);function r(t,n){Array.isArray(t)||(t=Object.values(t));var r=t.filter((function(t){return!(Fe(t,e)in n.entities)}));0!==r.length&&a(r,n)}function o(t,n){var r=[];t.forEach((function(t){return function(t,n,r){if(!(n.id in r.entities))return!1;var o=r.entities[n.id],i=Object.assign({},o,n.changes),a=Fe(i,e);return delete r.entities[n.id],t.push(i),a!==n.id}(r,t,n)})),0!==r.length&&a(r,n)}function i(t,n){Array.isArray(t)||(t=Object.values(t));var i=[],a=[],u=t,c=Array.isArray(u),f=0;for(u=c?u:u[Symbol.iterator]();;){var s;if(c){if(f>=u.length)break;s=u[f++]}else{if((f=u.next()).done)break;s=f.value}var l=s,d=Fe(l,e);d in n.entities?a.push({id:d,changes:l}):i.push(l)}o(a,n),r(i,n)}function a(n,r){n.sort(t),n.forEach((function(t){r.entities[e(t)]=t}));var o=Object.values(r.entities);o.sort(t);var i=o.map(e);(function(e,t){if(e.length!==t.length)return!1;for(var n=0;n<e.length&&n<t.length;n++)if(e[n]!==t[n])return!1;return!0})(r.ids,i)||(r.ids=i)}return{removeOne:n.removeOne,removeMany:n.removeMany,removeAll:n.removeAll,addOne:$e((function(e,t){return r([e],t)})),updateOne:$e((function(e,t){return o([e],t)})),upsertOne:$e((function(e,t){return i([e],t)})),setAll:$e((function(e,t){Array.isArray(e)||(e=Object.values(e)),t.entities={},t.ids=[],r(e,t)})),addMany:$e(r),updateMany:$e(o),upsertMany:$e(i)}}(n,r):Ve(n))}"undefined"!=typeof Symbol&&(Symbol.iterator||(Symbol.iterator=Symbol("Symbol.iterator"))),"undefined"!=typeof Symbol&&(Symbol.asyncIterator||(Symbol.asyncIterator=Symbol("Symbol.asyncIterator")));var ze=function(e){void 0===e&&(e=21);for(var t="",n=e;n--;)t+="ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW"[64*Math.random()|0];return t},Ke=["name","message","stack","code"],He=function(e){this.payload=e,this.name="RejectWithValue",this.message="Rejected"},Ze=function(e){if("object"==typeof e&&null!==e){var t={},n=Ke,r=Array.isArray(n),o=0;for(n=r?n:n[Symbol.iterator]();;){var i;if(r){if(o>=n.length)break;i=n[o++]}else{if((o=n.next()).done)break;i=o.value}var a=i;"string"==typeof e[a]&&(t[a]=e[a])}return t}return{message:String(e)}};function Je(e,t,n){var r=De(e+"/fulfilled",(function(e,t,n){return{payload:e,meta:{arg:n,requestId:t,requestStatus:"fulfilled"}}})),o=De(e+"/pending",(function(e,t){return{payload:void 0,meta:{arg:t,requestId:e,requestStatus:"pending"}}})),i=De(e+"/rejected",(function(e,t,r){var o=e instanceof He,i=!!e&&"AbortError"===e.name,a=!!e&&"ConditionError"===e.name;return{payload:e instanceof He?e.payload:void 0,error:(n&&n.serializeError||Ze)(e||"Rejected"),meta:{arg:r,requestId:t,rejectedWithValue:o,requestStatus:"rejected",aborted:i,condition:a}}})),a="undefined"!=typeof AbortController?AbortController:function(){function e(){this.signal={aborted:!1,addEventListener:function(){},dispatchEvent:function(){return!1},onabort:function(){},removeEventListener:function(){}}}return e.prototype.abort=function(){},e}();return Object.assign((function(e){return function(u,c,f){var s,l=ze(),d=new a,p=new Promise((function(e,t){return d.signal.addEventListener("abort",(function(){return t({name:"AbortError",message:s||"Aborted"})}))})),y=!1,h=function(){try{var a,s=function(e){return h?e:(n&&!n.dispatchConditionRejection&&i.match(a)&&a.meta.condition||u(a),a)},h=!1,v=function(s,h){try{var v=function(){if(n&&n.condition&&!1===n.condition(e,{getState:c,extra:f}))throw{name:"ConditionError",message:"Aborted due to condition callback returning false."};return y=!0,u(o(l,e)),Promise.resolve(Promise.race([p,Promise.resolve(t(e,{dispatch:u,getState:c,extra:f,requestId:l,signal:d.signal,rejectWithValue:function(e){return new He(e)}})).then((function(t){return t instanceof He?i(t,l,e):r(t,l,e)}))])).then((function(e){a=e}))}()}catch(e){return h(e)}return v&&v.then?v.then(void 0,h):v}(0,(function(t){a=i(t,l,e)}));return Promise.resolve(v&&v.then?v.then(s):s(v))}catch(e){return Promise.reject(e)}}();return Object.assign(h,{abort:function(e){y&&(s=e,d.abort())},requestId:l,arg:e})}}),{pending:o,rejected:i,fulfilled:r,typePrefix:e})}function Xe(e){if(e.meta&&e.meta.rejectedWithValue)throw e.payload;if(e.error)throw e.error;return e.payload}var Ye=function(e,t){return function(e){return e&&"function"==typeof e.match}(e)?e.match(t):e(t)};function Ge(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return t.some((function(t){return Ye(t,e)}))}}function Qe(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return t.every((function(t){return Ye(t,e)}))}}function et(e,t){if(!e||!e.meta)return!1;var n="string"==typeof e.meta.requestId,r=t.indexOf(e.meta.requestStatus)>-1;return n&&r}function tt(e){return"function"==typeof e[0]&&"pending"in e[0]&&"fulfilled"in e[0]&&"rejected"in e[0]}function nt(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return et(e,["pending"])}:tt(t)?function(e){var n=t.map((function(e){return e.pending}));return Ge.apply(void 0,n)(e)}:nt()(t[0])}function rt(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return et(e,["rejected"])}:tt(t)?function(e){var n=t.map((function(e){return e.rejected}));return Ge.apply(void 0,n)(e)}:rt()(t[0])}function ot(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var r=function(e){return e&&e.meta&&e.meta.rejectedWithValue};return 0===t.length||tt(t)?function(e){return Qe(rt.apply(void 0,t),r)(e)}:ot()(t[0])}function it(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return et(e,["fulfilled"])}:tt(t)?function(e){var n=t.map((function(e){return e.fulfilled}));return Ge.apply(void 0,n)(e)}:it()(t[0])}function at(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return et(e,["pending","fulfilled","rejected"])}:tt(t)?function(e){var n=[],r=t,o=Array.isArray(r),i=0;for(r=o?r:r[Symbol.iterator]();;){var a;if(o){if(i>=r.length)break;a=r[i++]}else{if((i=r.next()).done)break;a=i.value}var u=a;n.push(u.pending,u.rejected,u.fulfilled)}return Ge.apply(void 0,n)(e)}:at()(t[0])}!function(){function e(e,t){var n=i[e];return n?n.enumerable=t:i[e]=n={configurable:!0,enumerable:t,get:function(){var t=this[q];return Z.get(t,e)},set:function(t){var n=this[q];Z.set(n,e,t)}},n}function t(e){for(var t=e.length-1;t>=0;t--){var o=e[t][q];if(!o.P)switch(o.i){case 5:r(o)&&_(o);break;case 4:n(o)&&_(o)}}}function n(e){for(var t=e.t,n=e.k,r=z(n),o=r.length-1;o>=0;o--){var i=r[o];if(i!==q){var a=t[i];if(void 0===a&&!c(t,i))return!0;var u=n[i],f=u&&u[q];if(f?f.t!==a:!s(u,a))return!0}}var l=!!t[q];return r.length!==z(t).length+(l?0:1)}function r(e){var t=e.k;if(t.length!==e.t.length)return!0;var n=Object.getOwnPropertyDescriptor(t,t.length-1);return!(!n||n.get)}var i={};!function(e,t){H[e]||(H[e]=t)}("ES5",{J:function(t,n){var r=Array.isArray(t),o=function(t,n){if(t){for(var r=Array(n.length),o=0;o<n.length;o++)Object.defineProperty(r,""+o,e(o,!0));return r}var i=K(n);delete i[q];for(var a=z(i),u=0;u<a.length;u++){var c=a[u];i[c]=e(c,t||!!i[c].enumerable)}return Object.create(Object.getPrototypeOf(n),i)}(r,t),i={i:r?5:4,A:n?n.A:m(),P:!1,I:!1,D:{},l:n,t,k:o,o:null,g:!1,C:!1};return Object.defineProperty(o,q,{value:i,writable:!0}),o},S:function(e,n,i){i?o(n)&&n[q].A===e&&t(e.p):(e.u&&function e(t){if(t&&"object"==typeof t){var n=t[q];if(n){var o=n.t,i=n.k,u=n.D,f=n.i;if(4===f)a(i,(function(t){t!==q&&(void 0!==o[t]||c(o,t)?u[t]||e(i[t]):(u[t]=!0,_(n)))})),a(o,(function(e){void 0!==i[e]||c(i,e)||(u[e]=!1,_(n))}));else if(5===f){if(r(n)&&(_(n),u.length=!0),i.length<o.length)for(var s=i.length;s<o.length;s++)u[s]=!1;else for(var l=o.length;l<i.length;l++)u[l]=!0;for(var d=Math.min(i.length,o.length),p=0;p<d;p++)void 0===u[p]&&e(i[p])}}}}(e.p[0]),t(e.p))},K:function(e){return 4===e.i?n(e):r(e)}})}()},829:(e,t,n)=>{"use strict";n.d(t,{Z:()=>u});var r=n(15),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([e.id,".error {\r\n  color: red;\r\n}\r\n.primary {\r\n  color: blue;\r\n}","",{version:3,sources:["webpack://./webapp/src/tasks/main.css"],names:[],mappings:"AAAA;EACE,UAAU;AACZ;AACA;EACE,WAAW;AACb",sourcesContent:[".error {\r\n  color: red;\r\n}\r\n.primary {\r\n  color: blue;\r\n}"],sourceRoot:""}]);const u=a},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var u=0;u<e.length;u++){var c=[].concat(e[u]);r&&o[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),t.push(c))}},t}},15:e=>{"use strict";function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}e.exports=function(e){var n,r,o=(r=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return n}}(n,r)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(e,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[1],a=o[3];if("function"==typeof btoa){var u=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(u),f="/*# ".concat(c," */"),s=a.sources.map((function(e){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(e," */")}));return[i].concat(s).concat([f]).join("\n")}return[i].join("\n")}},894:(e,t,n)=>{"use strict";function r(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}n.r(t),n.d(t,{default:()=>i});var o=r();o.withExtraArgument=r;const i=o},544:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});var r=n(379),o=n.n(r),i=n(829);o()(i.Z,{insert:"head",singleton:!1});const a=i.Z.locals||{}},379:(e,t,n)=>{"use strict";var r,o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),i=[];function a(e){for(var t=-1,n=0;n<i.length;n++)if(i[n].identifier===e){t=n;break}return t}function u(e,t){for(var n={},r=[],o=0;o<e.length;o++){var u=e[o],c=t.base?u[0]+t.base:u[0],f=n[c]||0,s="".concat(c," ").concat(f);n[c]=f+1;var l=a(s),d={css:u[1],media:u[2],sourceMap:u[3]};-1!==l?(i[l].references++,i[l].updater(d)):i.push({identifier:s,updater:h(d,t),references:1}),r.push(s)}return r}function c(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var i=n.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var a=o(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var f,s=(f=[],function(e,t){return f[e]=t,f.filter(Boolean).join("\n")});function l(e,t,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=s(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}function d(e,t,n){var r=n.css,o=n.media,i=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var p=null,y=0;function h(e,t){var n,r,o;if(t.singleton){var i=y++;n=p||(p=c(t)),r=l.bind(null,n,i,!1),o=l.bind(null,n,i,!0)}else n=c(t),r=d.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var n=u(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var o=a(n[r]);i[o].references--}for(var c=u(e,t),f=0;f<n.length;f++){var s=a(n[f]);0===i[s].references&&(i[s].updater(),i.splice(s,1))}n=c}}}},121:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r}),e=n.hmd(e);const r=function(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}("undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==n.g?n.g:e)},936:e=>{async function t(e,t,{method:n,body:r,...o}={}){let i;t&&(i={"Content-Type":"application/json"});const a={method:n,...o,headers:{...i,...o.headers}};if(r)if(t)a.body=JSON.stringify(r);else{const e=new FormData;for(const t in r)e.append(t,r[t]);a.body=e}let u;try{const t=await window.fetch(e,a);if(u=await t.json(),!t.ok)throw new Error(u.statusText);return u}catch(e){return Promise.reject(e.message||u)}}t.get=(e,n={})=>t(e,!0,{method:"GET",...n}),t.post=(e,n,r,o={})=>t(e,r,{method:"POST",body:n,...o}),t.put=(e,n,r,o={})=>t(e,r,{method:"PUT",body:n,...o}),t.del=(e,n,r,o={})=>t(e,r,{method:"DELETE",body:n,...o}),e.exports={client:t}},852:(e,t,n)=>{const{loadingAction:r,errorAction:o,doneAction:i,canceledAction:a,tasksLoadedAction:u,workersLoadedAction:c,addedAction:f}=n(970),s=n(618),l=n(153);t.add=e=>async t=>{t(r());try{const n=await l.add(e);t(f(n))}catch(n){t(o(`gagal menambahkan ${e.job}`))}},t.done=e=>async t=>{t(r());try{await l.done(e),t(i(e))}catch(e){t(o("gagal menyelesaikan pekerjaan"))}},t.cancel=e=>async t=>{t(r());try{await l.cancel(e),t(a(e))}catch(e){t(o("gagal membatalkan pekerjaan"))}},t.getList=async e=>{e(r());try{const t=await l.list();e(u(t))}catch(t){e(o("gagal memuat daftar pekerjaan"))}},t.getWorkersList=async e=>{e(r());try{const t=await s.list();e(c(t))}catch(t){e(o("gagal membatalkan pekerjaan"))}}},321:(e,t)=>{t.SERVICE_BASEURL="http://localhost:7002",t.WORKER_SERVICE_BASEURL="http://localhost:7001"},898:(e,t,n)=>{const{SERVICE_BASEURL:r}=n(321);e.exports={initialState:{loading:!1,error:null,workers:[],tasks:[]},added:function(e,t){const n=t.payload;return e.tasks.push({id:n.id,job:n.job,assignee:n.assignee.name,attachment:`${r}/attachment/${n.attachment}`,done:!1}),e.loading=!1,e.error=null,e},done:function(e,t){const n=e.tasks.findIndex((e=>e.id===t.payload));return e.tasks[n].done=!0,e.loading=!1,e.error=null,e},canceled:function(e,t){const n=e.tasks.findIndex((e=>e.id===t.payload));return e.tasks.splice(n,1),e.loading=!1,e.error=null,e},tasksLoaded:function(e,t){return e.tasks=t.payload.filter((e=>!e.cancelled)).map((e=>({id:e.id,job:e.job,assignee:e.assignee.name,attachment:`${r}/attachment/${e.attachment}`,done:e.done}))),e.loading=!1,e.error=null,e},workersLoaded:function(e,t){return e.workers=t.payload.map((e=>({id:e.id,name:e.name}))),e.loading=!1,e.error=null,e},error:function(e,t){e.loading=!1,e.error=t.payload},loading:function(e){e.loading=!0,e.error=null},clearError:function(e){e.error=null}}},970:(e,t,n)=>{const{createAction:r,createReducer:o,configureStore:i}=n(819),{initialState:a,error:u,loading:c,added:f,canceled:s,done:l,tasksLoaded:d,workersLoaded:p,clearError:y}=n(898),h=n(894),v=r("error"),b=r("loading"),g=r("added"),m=r("done"),w=r("canceled"),A=r("tasksLoaded"),O=r("workersLoaded"),j=r("clearError"),E=i({reducer:o(a,{[v]:u,[j]:y,[b]:c,[m]:l,[g]:f,[w]:s,[O]:p,[A]:d}),middleware:[h.default]});e.exports={store$:E,errorAction:v,loadingAction:b,addedAction:g,doneAction:m,canceledAction:w,tasksLoadedAction:A,workersLoadedAction:O,clearErrorAction:j}},153:(e,t,n)=>{const{client:r}=n(936),{SERVICE_BASEURL:o}=n(321);e.exports={add:function(e){return r.post(`${o}/add`,e)},list:function(){return r.get(`${o}/list`)},cancel:function(e){return r.put(`${o}/cancel?id=${e}`)},done:function(e){return r.put(`${o}/done?id=${e}`)}}},618:(e,t,n)=>{const{client:r}=n(936),{WORKER_SERVICE_BASEURL:o}=n(321);e.exports={list:function(){return r.get(`${o}/list`)}}}},t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={id:r,loaded:!1,exports:{}};return e[r](o,o.exports,n),o.loaded=!0,o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.hmd=e=>((e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{const{done:e,cancel:t,getList:r,add:o,getWorkersList:i}=n(852),{store$:a,errorAction:u,clearErrorAction:c}=n(970);n(544);const f=document.getElementById("form"),s=document.getElementById("job"),l=document.getElementById("assignee"),d=document.getElementById("attachment"),p=document.getElementById("list"),y=document.getElementById("error-text"),h=document.getElementById("loading-text");function v(n){n.error?y.textContent=n.error.toString():y.textContent="",n.loading?h.style="":h.style="display:none;",l.innerHTML="";for(let e=0;e<n.workers.length;e++){const t=n.workers[e],r=document.createElement("option");r.text=t.name,r.value=t.id,l.add(r)}p.innerHTML="";for(let r=0;r<n.tasks.length;r++){const o=n.tasks[r],i=document.createElement("div");let u=`\n      <a href="${o.attachment}" target="_blank">lampiran</a>\n      <span>${o.job}</span> -\n      <span>${o.assignee}</span>\n    `;if(o.done)u+="\n<span>sudah selesai</span>",i.innerHTML=u;else{const n=document.createElement("button");n.innerText="batal",n.onclick=function(){a.dispatch(t(o.id))};const r=document.createElement("button");r.innerText="selesai",r.onclick=function(){a.dispatch(e(o.id))},i.innerHTML=u,i.append(n,r)}p.append(i)}}f.onsubmit=e=>{e.preventDefault(),a.dispatch(c()),s.value&&l.options[l.selectedIndex]&&d.files[0]?(a.dispatch(o({job:s.value,assignee_id:l.options[l.selectedIndex].value,attachment:d.files[0]})),f.reset()):a.dispatch(u("form isian tidak lengkap!"))},a.subscribe((()=>{v(a.getState())})),v(a.getState()),a.dispatch(r),a.dispatch(i)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,