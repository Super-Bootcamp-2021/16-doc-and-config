(()=>{var e={819:(e,t,r)=>{"use strict";function n(e){for(var t=arguments.length,r=Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];throw Error("[Immer] minified error nr: "+e+(r.length?" "+r.map((function(e){return"'"+e+"'"})).join(","):"")+". Find the full error at: https://bit.ly/3cXEKWf")}function o(e){return!!e&&!!e[z]}function i(e){return!!e&&(function(e){if(!e||"object"!=typeof e)return!1;var t=Object.getPrototypeOf(e);return!t||t===Object.prototype}(e)||Array.isArray(e)||!!e[q]||!!e.constructor[q]||l(e)||d(e))}function u(e,t,r){void 0===r&&(r=!1),0===a(e)?(r?Object.keys:V)(e).forEach((function(n){r&&"symbol"==typeof n||t(n,e[n],e)})):e.forEach((function(r,n){return t(n,r,e)}))}function a(e){var t=e[z];return t?t.i>3?t.i-4:t.i:Array.isArray(e)?1:l(e)?2:d(e)?3:0}function c(e,t){return 2===a(e)?e.has(t):Object.prototype.hasOwnProperty.call(e,t)}function f(e,t,r){var n=a(e);2===n?e.set(t,r):3===n?(e.delete(t),e.add(r)):e[t]=r}function s(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}function l(e){return B&&e instanceof Map}function d(e){return $&&e instanceof Set}function p(e){return e.o||e.t}function y(e){if(Array.isArray(e))return Array.prototype.slice.call(e);var t=K(e);delete t[z];for(var r=V(t),n=0;n<r.length;n++){var o=r[n],i=t[o];!1===i.writable&&(i.writable=!0,i.configurable=!0),(i.get||i.set)&&(t[o]={configurable:!0,writable:!0,enumerable:i.enumerable,value:e[o]})}return Object.create(Object.getPrototypeOf(e),t)}function v(e,t){return void 0===t&&(t=!1),b(e)||o(e)||!i(e)||(a(e)>1&&(e.set=e.add=e.clear=e.delete=h),Object.freeze(e),t&&u(e,(function(e,t){return v(t,!0)}),!0)),e}function h(){n(2)}function b(e){return null==e||"object"!=typeof e||Object.isFrozen(e)}function g(e){var t=Z[e];return t||n(18,e),t}function m(){return L}function w(e,t){t&&(g("Patches"),e.u=[],e.s=[],e.v=t)}function O(e){A(e),e.p.forEach(E),e.p=null}function A(e){e===L&&(L=e.l)}function j(e){return L={p:[],l:L,h:e,m:!0,_:0}}function E(e){var t=e[z];0===t.i||1===t.i?t.j():t.g=!0}function S(e,t){t._=t.p.length;var r=t.p[0],o=void 0!==e&&e!==r;return t.h.O||g("ES5").S(t,e,o),o?(r[z].P&&(O(t),n(4)),i(e)&&(e=P(t,e),t.l||I(t,e)),t.u&&g("Patches").M(r[z],e,t.u,t.s)):e=P(t,r,[]),O(t),t.u&&t.v(t.u,t.s),e!==F?e:void 0}function P(e,t,r){if(b(t))return t;var n=t[z];if(!n)return u(t,(function(o,i){return x(e,n,t,o,i,r)}),!0),t;if(n.A!==e)return t;if(!n.P)return I(e,n.t,!0),n.t;if(!n.I){n.I=!0,n.A._--;var o=4===n.i||5===n.i?n.o=y(n.k):n.o;u(3===n.i?new Set(o):o,(function(t,i){return x(e,n,o,t,i,r)})),I(e,o,!1),r&&e.u&&g("Patches").R(n,r,e.u,e.s)}return n.o}function x(e,t,r,n,u,a){if(o(u)){var s=P(e,u,a&&t&&3!==t.i&&!c(t.D,n)?a.concat(n):void 0);if(f(r,n,s),!o(s))return;e.m=!1}if(i(u)&&!b(u)){if(!e.h.N&&e._<1)return;P(e,u),t&&t.A.l||I(e,u)}}function I(e,t,r){void 0===r&&(r=!1),e.h.N&&e.m&&v(t,r)}function k(e,t){var r=e[z];return(r?p(r):e)[t]}function R(e,t){if(t in e)for(var r=Object.getPrototypeOf(e);r;){var n=Object.getOwnPropertyDescriptor(r,t);if(n)return n;r=Object.getPrototypeOf(r)}}function _(e){e.P||(e.P=!0,e.l&&_(e.l))}function C(e){e.o||(e.o=y(e.t))}function T(e,t,r){var n=l(t)?g("MapSet").T(t,r):d(t)?g("MapSet").F(t,r):e.O?function(e,t){var r=Array.isArray(e),n={i:r?1:0,A:t?t.A:m(),P:!1,I:!1,D:{},l:t,t:e,k:null,o:null,j:null,C:!1},o=n,i=H;r&&(o=[n],i=J);var u=Proxy.revocable(o,i),a=u.revoke,c=u.proxy;return n.k=c,n.j=a,c}(t,r):g("ES5").J(t,r);return(r?r.A:m()).p.push(n),n}function M(e){return o(e)||n(22,e),function e(t){if(!i(t))return t;var r,n=t[z],o=a(t);if(n){if(!n.P&&(n.i<4||!g("ES5").K(n)))return n.t;n.I=!0,r=D(t,o),n.I=!1}else r=D(t,o);return u(r,(function(t,o){n&&function(e,t){return 2===a(e)?e.get(t):e[t]}(n.t,t)===o||f(r,t,e(o))})),3===o?new Set(r):r}(e)}function D(e,t){switch(t){case 2:return new Map(e);case 3:return Array.from(e)}return y(e)}r.r(t),r.d(t,{MiddlewareArray:()=>xe,__DO_NOT_USE__ActionTypes:()=>te,applyMiddleware:()=>de,bindActionCreators:()=>ae,combineReducers:()=>ie,compose:()=>le,configureStore:()=>Me,createAction:()=>De,createAsyncThunk:()=>Je,createDraftSafeSelector:()=>ge,createEntityAdapter:()=>ze,createImmutableStateInvariantMiddleware:()=>ke,createNextState:()=>G,createReducer:()=>Be,createSelector:()=>he,createSerializableStateInvariantMiddleware:()=>Ce,createSlice:()=>$e,createStore:()=>ne,current:()=>M,findNonSerializableValue:()=>_e,freeze:()=>v,getDefaultMiddleware:()=>Te,getType:()=>Le,isAllOf:()=>Qe,isAnyOf:()=>Ge,isAsyncThunkAction:()=>ut,isFulfilled:()=>it,isImmutableDefault:()=>Ie,isPending:()=>rt,isPlain:()=>Re,isPlainObject:()=>Pe,isRejected:()=>nt,isRejectedWithValue:()=>ot,nanoid:()=>Ve,unwrapResult:()=>Xe});var N,L,U="undefined"!=typeof Symbol&&"symbol"==typeof Symbol("x"),B="undefined"!=typeof Map,$="undefined"!=typeof Set,W="undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,F=U?Symbol.for("immer-nothing"):((N={})["immer-nothing"]=!0,N),q=U?Symbol.for("immer-draftable"):"__$immer_draftable",z=U?Symbol.for("immer-state"):"__$immer_state",V=("undefined"!=typeof Symbol&&Symbol.iterator,"undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:Object.getOwnPropertyNames),K=Object.getOwnPropertyDescriptors||function(e){var t={};return V(e).forEach((function(r){t[r]=Object.getOwnPropertyDescriptor(e,r)})),t},Z={},H={get:function(e,t){if(t===z)return e;var r=p(e);if(!c(r,t))return function(e,t,r){var n,o=R(t,r);return o?"value"in o?o.value:null===(n=o.get)||void 0===n?void 0:n.call(e.k):void 0}(e,r,t);var n=r[t];return e.I||!i(n)?n:n===k(e.t,t)?(C(e),e.o[t]=T(e.A.h,n,e)):n},has:function(e,t){return t in p(e)},ownKeys:function(e){return Reflect.ownKeys(p(e))},set:function(e,t,r){var n=R(p(e),t);if(null==n?void 0:n.set)return n.set.call(e.k,r),!0;if(!e.P){var o=k(p(e),t),i=null==o?void 0:o[z];if(i&&i.t===r)return e.o[t]=r,e.D[t]=!1,!0;if(s(r,o)&&(void 0!==r||c(e.t,t)))return!0;C(e),_(e)}return e.o[t]=r,e.D[t]=!0,!0},deleteProperty:function(e,t){return void 0!==k(e.t,t)||t in e.t?(e.D[t]=!1,C(e),_(e)):delete e.D[t],e.o&&delete e.o[t],!0},getOwnPropertyDescriptor:function(e,t){var r=p(e),n=Reflect.getOwnPropertyDescriptor(r,t);return n?{writable:!0,configurable:1!==e.i||"length"!==t,enumerable:n.enumerable,value:r[t]}:n},defineProperty:function(){n(11)},getPrototypeOf:function(e){return Object.getPrototypeOf(e.t)},setPrototypeOf:function(){n(12)}},J={};u(H,(function(e,t){J[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),J.deleteProperty=function(e,t){return H.deleteProperty.call(this,e[0],t)},J.set=function(e,t,r){return H.set.call(this,e[0],t,r,e[0])};var X=new(function(){function e(e){this.O=W,this.N=!0,"boolean"==typeof(null==e?void 0:e.useProxies)&&this.setUseProxies(e.useProxies),"boolean"==typeof(null==e?void 0:e.autoFreeze)&&this.setAutoFreeze(e.autoFreeze),this.produce=this.produce.bind(this),this.produceWithPatches=this.produceWithPatches.bind(this)}var t=e.prototype;return t.produce=function(e,t,r){if("function"==typeof e&&"function"!=typeof t){var o=t;t=e;var u=this;return function(e){var r=this;void 0===e&&(e=o);for(var n=arguments.length,i=Array(n>1?n-1:0),a=1;a<n;a++)i[a-1]=arguments[a];return u.produce(e,(function(e){var n;return(n=t).call.apply(n,[r,e].concat(i))}))}}var a;if("function"!=typeof t&&n(6),void 0!==r&&"function"!=typeof r&&n(7),i(e)){var c=j(this),f=T(this,e,void 0),s=!0;try{a=t(f),s=!1}finally{s?O(c):A(c)}return"undefined"!=typeof Promise&&a instanceof Promise?a.then((function(e){return w(c,r),S(e,c)}),(function(e){throw O(c),e})):(w(c,r),S(a,c))}if(!e||"object"!=typeof e){if((a=t(e))===F)return;return void 0===a&&(a=e),this.N&&v(a,!0),a}n(21,e)},t.produceWithPatches=function(e,t){var r,n,o=this;return"function"==typeof e?function(t){for(var r=arguments.length,n=Array(r>1?r-1:0),i=1;i<r;i++)n[i-1]=arguments[i];return o.produceWithPatches(t,(function(t){return e.apply(void 0,[t].concat(n))}))}:[this.produce(e,t,(function(e,t){r=e,n=t})),r,n]},t.createDraft=function(e){i(e)||n(8),o(e)&&(e=M(e));var t=j(this),r=T(this,e,void 0);return r[z].C=!0,A(t),r},t.finishDraft=function(e,t){var r=(e&&e[z]).A;return w(r,t),S(void 0,r)},t.setAutoFreeze=function(e){this.N=e},t.setUseProxies=function(e){e&&!W&&n(20),this.O=e},t.applyPatches=function(e,t){var r;for(r=t.length-1;r>=0;r--){var n=t[r];if(0===n.path.length&&"replace"===n.op){e=n.value;break}}var i=g("Patches").$;return o(e)?i(e,t):this.produce(e,(function(e){return i(e,t.slice(r+1))}))},e}()),Y=X.produce;X.produceWithPatches.bind(X),X.setAutoFreeze.bind(X),X.setUseProxies.bind(X),X.applyPatches.bind(X),X.createDraft.bind(X),X.finishDraft.bind(X);const G=Y;var Q=r(121),ee=function(){return Math.random().toString(36).substring(7).split("").join(".")},te={INIT:"@@redux/INIT"+ee(),REPLACE:"@@redux/REPLACE"+ee(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+ee()}};function re(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function ne(e,t,r){var n;if("function"==typeof t&&"function"==typeof r||"function"==typeof r&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof t&&void 0===r&&(r=t,t=void 0),void 0!==r){if("function"!=typeof r)throw new Error("Expected the enhancer to be a function.");return r(ne)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var o=e,i=t,u=[],a=u,c=!1;function f(){a===u&&(a=u.slice())}function s(){if(c)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return i}function l(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(c)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribelistener for more details.");var t=!0;return f(),a.push(e),function(){if(t){if(c)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribelistener for more details.");t=!1,f();var r=a.indexOf(e);a.splice(r,1),u=null}}}function d(e){if(!re(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(c)throw new Error("Reducers may not dispatch actions.");try{c=!0,i=o(i,e)}finally{c=!1}for(var t=u=a,r=0;r<t.length;r++)(0,t[r])();return e}function p(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");o=e,d({type:te.REPLACE})}function y(){var e,t=l;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function r(){e.next&&e.next(s())}return r(),{unsubscribe:t(r)}}})[Q.Z]=function(){return this},e}return d({type:te.INIT}),(n={dispatch:d,subscribe:l,getState:s,replaceReducer:p})[Q.Z]=y,n}function oe(e,t){var r=t&&t.type;return"Given "+(r&&'action "'+String(r)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function ie(e){for(var t=Object.keys(e),r={},n=0;n<t.length;n++){var o=t[n];"function"==typeof e[o]&&(r[o]=e[o])}var i,u=Object.keys(r);try{!function(e){Object.keys(e).forEach((function(t){var r=e[t];if(void 0===r(void 0,{type:te.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===r(void 0,{type:te.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+te.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(r)}catch(e){i=e}return function(e,t){if(void 0===e&&(e={}),i)throw i;for(var n=!1,o={},a=0;a<u.length;a++){var c=u[a],f=r[c],s=e[c],l=f(s,t);if(void 0===l){var d=oe(c,t);throw new Error(d)}o[c]=l,n=n||l!==s}return(n=n||u.length!==Object.keys(e).length)?o:e}}function ue(e,t){return function(){return t(e.apply(this,arguments))}}function ae(e,t){if("function"==typeof e)return ue(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var r={};for(var n in e){var o=e[n];"function"==typeof o&&(r[n]=ue(o,t))}return r}function ce(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function fe(e,t){var r=Object.keys(e);return Object.getOwnPropertySymbols&&r.push.apply(r,Object.getOwnPropertySymbols(e)),t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r}function se(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?fe(r,!0).forEach((function(t){ce(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):fe(r).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function le(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function de(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return function(e){return function(){var r=e.apply(void 0,arguments),n=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},o={getState:r.getState,dispatch:function(){return n.apply(void 0,arguments)}},i=t.map((function(e){return e(o)}));return se({},r,{dispatch:n=le.apply(void 0,i)(r.dispatch)})}}}function pe(e,t){return e===t}function ye(e,t,r){if(null===t||null===r||t.length!==r.length)return!1;for(var n=t.length,o=0;o<n;o++)if(!e(t[o],r[o]))return!1;return!0}function ve(e){var t=Array.isArray(e[0])?e[0]:e;if(!t.every((function(e){return"function"==typeof e}))){var r=t.map((function(e){return typeof e})).join(", ");throw new Error("Selector creators expect all input-selectors to be functions, instead received the following types: ["+r+"]")}return t}var he=function(e){for(var t=arguments.length,r=Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];return function(){for(var t=arguments.length,n=Array(t),o=0;o<t;o++)n[o]=arguments[o];var i=0,u=n.pop(),a=ve(n),c=e.apply(void 0,[function(){return i++,u.apply(null,arguments)}].concat(r)),f=e((function(){for(var e=[],t=a.length,r=0;r<t;r++)e.push(a[r].apply(null,arguments));return c.apply(null,e)}));return f.resultFunc=u,f.dependencies=a,f.recomputations=function(){return i},f.resetRecomputations=function(){return i=0},f}}((function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:pe,r=null,n=null;return function(){return ye(t,r,arguments)||(n=e.apply(null,arguments)),r=arguments,n}})),be=r(894),ge=function(){var e=he.apply(void 0,arguments),t=function(t){for(var r=arguments.length,n=new Array(r>1?r-1:0),i=1;i<r;i++)n[i-1]=arguments[i];return e.apply(void 0,[o(t)?M(t):t].concat(n))};return t};function me(){return(me=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}function we(e){return(we=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Oe(e,t){return(Oe=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Ae(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function je(e,t,r){return(je=Ae()?Reflect.construct:function(e,t,r){var n=[null];n.push.apply(n,t);var o=new(Function.bind.apply(e,n));return r&&Oe(o,r.prototype),o}).apply(null,arguments)}function Ee(e){var t="function"==typeof Map?new Map:void 0;return(Ee=function(e){if(null===e||(r=e,-1===Function.toString.call(r).indexOf("[native code]")))return e;var r;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,n)}function n(){return je(e,arguments,we(this).constructor)}return n.prototype=Object.create(e.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),Oe(n,e)})(e)}var Se="undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:function(){if(0!==arguments.length)return"object"==typeof arguments[0]?le:le.apply(null,arguments)};function Pe(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}var xe=function(e){var t,r;function n(){return e.apply(this,arguments)||this}r=e,(t=n).prototype=Object.create(r.prototype),t.prototype.constructor=t,t.__proto__=r;var o=n.prototype;return o.concat=function(){for(var t,r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return je(n,(t=e.prototype.concat).call.apply(t,[this].concat(o)))},o.prepend=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return 1===t.length&&Array.isArray(t[0])?je(n,t[0].concat(this)):je(n,t.concat(this))},n}(Ee(Array));function Ie(e){return"object"!=typeof e||null==e}function ke(e){return void 0===e&&(e={}),function(){return function(e){return function(t){return e(t)}}}}function Re(e){return null==e||"string"==typeof e||"boolean"==typeof e||"number"==typeof e||Array.isArray(e)||Pe(e)}function _e(e,t,r,n,o){var i;if(void 0===t&&(t=[]),void 0===r&&(r=Re),void 0===o&&(o=[]),!r(e))return{keyPath:t.join(".")||"<root>",value:e};if("object"!=typeof e||null===e)return!1;var u=null!=n?n(e):Object.entries(e),a=o.length>0,c=u,f=Array.isArray(c),s=0;for(c=f?c:c[Symbol.iterator]();;){var l;if(f){if(s>=c.length)break;l=c[s++]}else{if((s=c.next()).done)break;l=s.value}var d=l,p=d[0],y=d[1],v=t.concat(p);if(!(a&&o.indexOf(v.join("."))>=0)){if(!r(y))return{keyPath:v.join("."),value:y};if("object"==typeof y&&(i=_e(y,v,r,n,o)))return i}}return!1}function Ce(e){return void 0===e&&(e={}),function(){return function(e){return function(t){return e(t)}}}}function Te(e){void 0===e&&(e={});var t=e,r=t.thunk,n=void 0===r||r,o=(t.immutableCheck,t.serializableCheck,new xe);return n&&(function(e){return"boolean"==typeof e}(n)?o.push(be.default):o.push(be.default.withExtraArgument(n.extraArgument))),o}function Me(e){var t,r=function(e){return Te(e)},n=e||{},o=n.reducer,i=void 0===o?void 0:o,u=n.middleware,a=void 0===u?r():u,c=n.devTools,f=void 0===c||c,s=n.preloadedState,l=void 0===s?void 0:s,d=n.enhancers,p=void 0===d?void 0:d;if("function"==typeof i)t=i;else{if(!Pe(i))throw new Error('"reducer" is a required argument, and must be a function or an object of functions that can be passed to combineReducers');t=ie(i)}var y=de.apply(void 0,"function"==typeof a?a(r):a),v=le;f&&(v=Se(me({trace:!1},"object"==typeof f&&f)));var h=[y];return Array.isArray(p)?h=[y].concat(p):"function"==typeof p&&(h=p(h)),ne(t,l,v.apply(void 0,h))}function De(e,t){function r(){if(t){var r=t.apply(void 0,arguments);if(!r)throw new Error("prepareAction did not return an object");return me({type:e,payload:r.payload},"meta"in r&&{meta:r.meta},{},"error"in r&&{error:r.error})}return{type:e,payload:arguments.length<=0?void 0:arguments[0]}}return r.toString=function(){return""+e},r.type=e,r.match=function(t){return t.type===e},r}function Ne(e){return["type","payload","error","meta"].indexOf(e)>-1}function Le(e){return""+e}function Ue(e){var t,r={},n=[],o={addCase:function(e,t){var n="string"==typeof e?e:e.type;if(n in r)throw new Error("addCase cannot be called with two reducers for the same action type");return r[n]=t,o},addMatcher:function(e,t){return n.push({matcher:e,reducer:t}),o},addDefaultCase:function(e){return t=e,o}};return e(o),[r,n,t]}function Be(e,t,r,n){void 0===r&&(r=[]);var u="function"==typeof t?Ue(t):[t,r,n],a=u[0],c=u[1],f=u[2];return function(t,r){void 0===t&&(t=e);var n=[a[r.type]].concat(c.filter((function(e){return(0,e.matcher)(r)})).map((function(e){return e.reducer})));return 0===n.filter((function(e){return!!e})).length&&(n=[f]),n.reduce((function(e,t){if(t){if(o(e)){var n=t(e,r);return void 0===n?e:n}if(i(e))return G(e,(function(e){return t(e,r)}));var u=t(e,r);if(void 0===u){if(null===e)return e;throw Error("A case reducer on a non-draftable value must not return undefined")}return u}return e}),t)}}function $e(e){var t=e.name,r=e.initialState;if(!t)throw new Error("`name` is a required option for createSlice");var n=e.reducers||{},o=void 0===e.extraReducers?[]:"function"==typeof e.extraReducers?Ue(e.extraReducers):[e.extraReducers],i=o[0],u=void 0===i?{}:i,a=o[1],c=void 0===a?[]:a,f=o[2],s=void 0===f?void 0:f,l=Object.keys(n),d={},p={},y={};l.forEach((function(e){var r,o,i=n[e],u=t+"/"+e;"reducer"in i?(r=i.reducer,o=i.prepare):r=i,d[e]=r,p[u]=r,y[e]=o?De(u,o):De(u)}));var v=Be(r,me({},u,{},p),c,s);return{name:t,reducer:v,actions:y,caseReducers:d}}function We(e){return function(t,r){var n=function(t){!function(e){return Pe(t=e)&&"string"==typeof t.type&&Object.keys(t).every(Ne);var t}(r)?e(r,t):e(r.payload,t)};return o(t)?(n(t),t):G(t,n)}}function Fe(e,t){return t(e)}function qe(e){function t(t,r){var n=Fe(t,e);n in r.entities||(r.ids.push(n),r.entities[n]=t)}function r(e,r){Array.isArray(e)||(e=Object.values(e));var n=e,o=Array.isArray(n),i=0;for(n=o?n:n[Symbol.iterator]();;){var u;if(o){if(i>=n.length)break;u=n[i++]}else{if((i=n.next()).done)break;u=i.value}t(u,r)}}function n(e,t){var r=!1;e.forEach((function(e){e in t.entities&&(delete t.entities[e],r=!0)})),r&&(t.ids=t.ids.filter((function(e){return e in t.entities})))}function o(t,r){var n={},o={};t.forEach((function(e){e.id in r.entities&&(o[e.id]={id:e.id,changes:me({},o[e.id]?o[e.id].changes:null,{},e.changes)})})),(t=Object.values(o)).length>0&&t.filter((function(t){return function(t,r,n){var o=n.entities[r.id],i=Object.assign({},o,r.changes),u=Fe(i,e),a=u!==r.id;return a&&(t[r.id]=u,delete n.entities[r.id]),n.entities[u]=i,a}(n,t,r)})).length>0&&(r.ids=r.ids.map((function(e){return n[e]||e})))}function i(t,n){Array.isArray(t)||(t=Object.values(t));var i=[],u=[],a=t,c=Array.isArray(a),f=0;for(a=c?a:a[Symbol.iterator]();;){var s;if(c){if(f>=a.length)break;s=a[f++]}else{if((f=a.next()).done)break;s=f.value}var l=s,d=Fe(l,e);d in n.entities?u.push({id:d,changes:l}):i.push(l)}o(u,n),r(i,n)}return{removeAll:(u=function(e){Object.assign(e,{ids:[],entities:{}})},a=We((function(e,t){return u(t)})),function(e){return a(e,void 0)}),addOne:We(t),addMany:We(r),setAll:We((function(e,t){Array.isArray(e)||(e=Object.values(e)),t.ids=[],t.entities={},r(e,t)})),updateOne:We((function(e,t){return o([e],t)})),updateMany:We(o),upsertOne:We((function(e,t){return i([e],t)})),upsertMany:We(i),removeOne:We((function(e,t){return n([e],t)})),removeMany:We(n)};var u,a}function ze(e){void 0===e&&(e={});var t=me({sortComparer:!1,selectId:function(e){return e.id}},e),r=t.selectId,n=t.sortComparer;return me({selectId:r,sortComparer:n},{getInitialState:function(e){return void 0===e&&(e={}),Object.assign({ids:[],entities:{}},e)}},{},{getSelectors:function(e){var t=function(e){return e.ids},r=function(e){return e.entities},n=ge(t,r,(function(e,t){return e.map((function(e){return t[e]}))})),o=function(e,t){return t},i=function(e,t){return e[t]},u=ge(t,(function(e){return e.length}));if(!e)return{selectIds:t,selectEntities:r,selectAll:n,selectTotal:u,selectById:ge(r,o,i)};var a=ge(e,r);return{selectIds:ge(e,t),selectEntities:a,selectAll:ge(e,n),selectTotal:ge(e,u),selectById:ge(a,o,i)}}},{},n?function(e,t){var r=qe(e);function n(t,r){Array.isArray(t)||(t=Object.values(t));var n=t.filter((function(t){return!(Fe(t,e)in r.entities)}));0!==n.length&&u(n,r)}function o(t,r){var n=[];t.forEach((function(t){return function(t,r,n){if(!(r.id in n.entities))return!1;var o=n.entities[r.id],i=Object.assign({},o,r.changes),u=Fe(i,e);return delete n.entities[r.id],t.push(i),u!==r.id}(n,t,r)})),0!==n.length&&u(n,r)}function i(t,r){Array.isArray(t)||(t=Object.values(t));var i=[],u=[],a=t,c=Array.isArray(a),f=0;for(a=c?a:a[Symbol.iterator]();;){var s;if(c){if(f>=a.length)break;s=a[f++]}else{if((f=a.next()).done)break;s=f.value}var l=s,d=Fe(l,e);d in r.entities?u.push({id:d,changes:l}):i.push(l)}o(u,r),n(i,r)}function u(r,n){r.sort(t),r.forEach((function(t){n.entities[e(t)]=t}));var o=Object.values(n.entities);o.sort(t);var i=o.map(e);(function(e,t){if(e.length!==t.length)return!1;for(var r=0;r<e.length&&r<t.length;r++)if(e[r]!==t[r])return!1;return!0})(n.ids,i)||(n.ids=i)}return{removeOne:r.removeOne,removeMany:r.removeMany,removeAll:r.removeAll,addOne:We((function(e,t){return n([e],t)})),updateOne:We((function(e,t){return o([e],t)})),upsertOne:We((function(e,t){return i([e],t)})),setAll:We((function(e,t){Array.isArray(e)||(e=Object.values(e)),t.entities={},t.ids=[],n(e,t)})),addMany:We(n),updateMany:We(o),upsertMany:We(i)}}(r,n):qe(r))}"undefined"!=typeof Symbol&&(Symbol.iterator||(Symbol.iterator=Symbol("Symbol.iterator"))),"undefined"!=typeof Symbol&&(Symbol.asyncIterator||(Symbol.asyncIterator=Symbol("Symbol.asyncIterator")));var Ve=function(e){void 0===e&&(e=21);for(var t="",r=e;r--;)t+="ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW"[64*Math.random()|0];return t},Ke=["name","message","stack","code"],Ze=function(e){this.payload=e,this.name="RejectWithValue",this.message="Rejected"},He=function(e){if("object"==typeof e&&null!==e){var t={},r=Ke,n=Array.isArray(r),o=0;for(r=n?r:r[Symbol.iterator]();;){var i;if(n){if(o>=r.length)break;i=r[o++]}else{if((o=r.next()).done)break;i=o.value}var u=i;"string"==typeof e[u]&&(t[u]=e[u])}return t}return{message:String(e)}};function Je(e,t,r){var n=De(e+"/fulfilled",(function(e,t,r){return{payload:e,meta:{arg:r,requestId:t,requestStatus:"fulfilled"}}})),o=De(e+"/pending",(function(e,t){return{payload:void 0,meta:{arg:t,requestId:e,requestStatus:"pending"}}})),i=De(e+"/rejected",(function(e,t,n){var o=e instanceof Ze,i=!!e&&"AbortError"===e.name,u=!!e&&"ConditionError"===e.name;return{payload:e instanceof Ze?e.payload:void 0,error:(r&&r.serializeError||He)(e||"Rejected"),meta:{arg:n,requestId:t,rejectedWithValue:o,requestStatus:"rejected",aborted:i,condition:u}}})),u="undefined"!=typeof AbortController?AbortController:function(){function e(){this.signal={aborted:!1,addEventListener:function(){},dispatchEvent:function(){return!1},onabort:function(){},removeEventListener:function(){}}}return e.prototype.abort=function(){},e}();return Object.assign((function(e){return function(a,c,f){var s,l=Ve(),d=new u,p=new Promise((function(e,t){return d.signal.addEventListener("abort",(function(){return t({name:"AbortError",message:s||"Aborted"})}))})),y=!1,v=function(){try{var u,s=function(e){return v?e:(r&&!r.dispatchConditionRejection&&i.match(u)&&u.meta.condition||a(u),u)},v=!1,h=function(s,v){try{var h=function(){if(r&&r.condition&&!1===r.condition(e,{getState:c,extra:f}))throw{name:"ConditionError",message:"Aborted due to condition callback returning false."};return y=!0,a(o(l,e)),Promise.resolve(Promise.race([p,Promise.resolve(t(e,{dispatch:a,getState:c,extra:f,requestId:l,signal:d.signal,rejectWithValue:function(e){return new Ze(e)}})).then((function(t){return t instanceof Ze?i(t,l,e):n(t,l,e)}))])).then((function(e){u=e}))}()}catch(e){return v(e)}return h&&h.then?h.then(void 0,v):h}(0,(function(t){u=i(t,l,e)}));return Promise.resolve(h&&h.then?h.then(s):s(h))}catch(e){return Promise.reject(e)}}();return Object.assign(v,{abort:function(e){y&&(s=e,d.abort())},requestId:l,arg:e})}}),{pending:o,rejected:i,fulfilled:n,typePrefix:e})}function Xe(e){if(e.meta&&e.meta.rejectedWithValue)throw e.payload;if(e.error)throw e.error;return e.payload}var Ye=function(e,t){return function(e){return e&&"function"==typeof e.match}(e)?e.match(t):e(t)};function Ge(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return function(e){return t.some((function(t){return Ye(t,e)}))}}function Qe(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return function(e){return t.every((function(t){return Ye(t,e)}))}}function et(e,t){if(!e||!e.meta)return!1;var r="string"==typeof e.meta.requestId,n=t.indexOf(e.meta.requestStatus)>-1;return r&&n}function tt(e){return"function"==typeof e[0]&&"pending"in e[0]&&"fulfilled"in e[0]&&"rejected"in e[0]}function rt(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return 0===t.length?function(e){return et(e,["pending"])}:tt(t)?function(e){var r=t.map((function(e){return e.pending}));return Ge.apply(void 0,r)(e)}:rt()(t[0])}function nt(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return 0===t.length?function(e){return et(e,["rejected"])}:tt(t)?function(e){var r=t.map((function(e){return e.rejected}));return Ge.apply(void 0,r)(e)}:nt()(t[0])}function ot(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];var n=function(e){return e&&e.meta&&e.meta.rejectedWithValue};return 0===t.length||tt(t)?function(e){return Qe(nt.apply(void 0,t),n)(e)}:ot()(t[0])}function it(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return 0===t.length?function(e){return et(e,["fulfilled"])}:tt(t)?function(e){var r=t.map((function(e){return e.fulfilled}));return Ge.apply(void 0,r)(e)}:it()(t[0])}function ut(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return 0===t.length?function(e){return et(e,["pending","fulfilled","rejected"])}:tt(t)?function(e){var r=[],n=t,o=Array.isArray(n),i=0;for(n=o?n:n[Symbol.iterator]();;){var u;if(o){if(i>=n.length)break;u=n[i++]}else{if((i=n.next()).done)break;u=i.value}var a=u;r.push(a.pending,a.rejected,a.fulfilled)}return Ge.apply(void 0,r)(e)}:ut()(t[0])}!function(){function e(e,t){var r=i[e];return r?r.enumerable=t:i[e]=r={configurable:!0,enumerable:t,get:function(){var t=this[z];return H.get(t,e)},set:function(t){var r=this[z];H.set(r,e,t)}},r}function t(e){for(var t=e.length-1;t>=0;t--){var o=e[t][z];if(!o.P)switch(o.i){case 5:n(o)&&_(o);break;case 4:r(o)&&_(o)}}}function r(e){for(var t=e.t,r=e.k,n=V(r),o=n.length-1;o>=0;o--){var i=n[o];if(i!==z){var u=t[i];if(void 0===u&&!c(t,i))return!0;var a=r[i],f=a&&a[z];if(f?f.t!==u:!s(a,u))return!0}}var l=!!t[z];return n.length!==V(t).length+(l?0:1)}function n(e){var t=e.k;if(t.length!==e.t.length)return!0;var r=Object.getOwnPropertyDescriptor(t,t.length-1);return!(!r||r.get)}var i={};!function(e,t){Z[e]||(Z[e]=t)}("ES5",{J:function(t,r){var n=Array.isArray(t),o=function(t,r){if(t){for(var n=Array(r.length),o=0;o<r.length;o++)Object.defineProperty(n,""+o,e(o,!0));return n}var i=K(r);delete i[z];for(var u=V(i),a=0;a<u.length;a++){var c=u[a];i[c]=e(c,t||!!i[c].enumerable)}return Object.create(Object.getPrototypeOf(r),i)}(n,t),i={i:n?5:4,A:r?r.A:m(),P:!1,I:!1,D:{},l:r,t,k:o,o:null,g:!1,C:!1};return Object.defineProperty(o,z,{value:i,writable:!0}),o},S:function(e,r,i){i?o(r)&&r[z].A===e&&t(e.p):(e.u&&function e(t){if(t&&"object"==typeof t){var r=t[z];if(r){var o=r.t,i=r.k,a=r.D,f=r.i;if(4===f)u(i,(function(t){t!==z&&(void 0!==o[t]||c(o,t)?a[t]||e(i[t]):(a[t]=!0,_(r)))})),u(o,(function(e){void 0!==i[e]||c(i,e)||(a[e]=!1,_(r))}));else if(5===f){if(n(r)&&(_(r),a.length=!0),i.length<o.length)for(var s=i.length;s<o.length;s++)a[s]=!1;else for(var l=o.length;l<i.length;l++)a[l]=!0;for(var d=Math.min(i.length,o.length),p=0;p<d;p++)void 0===a[p]&&e(i[p])}}}}(e.p[0]),t(e.p))},K:function(e){return 4===e.i?r(e):n(e)}})}()},904:(e,t,r)=>{"use strict";r.d(t,{Z:()=>a});var n=r(15),o=r.n(n),i=r(645),u=r.n(i)()(o());u.push([e.id,".error {\r\n  color: red;\r\n}\r\n.primary {\r\n  color: blue;\r\n}","",{version:3,sources:["webpack://./webapp/src/worker/main.css"],names:[],mappings:"AAAA;EACE,UAAU;AACZ;AACA;EACE,WAAW;AACb",sourcesContent:[".error {\r\n  color: red;\r\n}\r\n.primary {\r\n  color: blue;\r\n}"],sourceRoot:""}]);const a=u},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var r=e(t);return t[2]?"@media ".concat(t[2]," {").concat(r,"}"):r})).join("")},t.i=function(e,r,n){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(n)for(var i=0;i<this.length;i++){var u=this[i][0];null!=u&&(o[u]=!0)}for(var a=0;a<e.length;a++){var c=[].concat(e[a]);n&&o[c[0]]||(r&&(c[2]?c[2]="".concat(r," and ").concat(c[2]):c[2]=r),t.push(c))}},t}},15:e=>{"use strict";function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}e.exports=function(e){var r,n,o=(n=4,function(e){if(Array.isArray(e))return e}(r=e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var r=[],n=!0,o=!1,i=void 0;try{for(var u,a=e[Symbol.iterator]();!(n=(u=a.next()).done)&&(r.push(u.value),!t||r.length!==t);n=!0);}catch(e){o=!0,i=e}finally{try{n||null==a.return||a.return()}finally{if(o)throw i}}return r}}(r,n)||function(e,r){if(e){if("string"==typeof e)return t(e,r);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?t(e,r):void 0}}(r,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[1],u=o[3];if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(u)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),f="/*# ".concat(c," */"),s=u.sources.map((function(e){return"/*# sourceURL=".concat(u.sourceRoot||"").concat(e," */")}));return[i].concat(s).concat([f]).join("\n")}return[i].join("\n")}},894:(e,t,r)=>{"use strict";function n(e){return function(t){var r=t.dispatch,n=t.getState;return function(t){return function(o){return"function"==typeof o?o(r,n,e):t(o)}}}}r.r(t),r.d(t,{default:()=>i});var o=n();o.withExtraArgument=n;const i=o},346:(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>u});var n=r(379),o=r.n(n),i=r(904);o()(i.Z,{insert:"head",singleton:!1});const u=i.Z.locals||{}},379:(e,t,r)=>{"use strict";var n,o=function(){var e={};return function(t){if(void 0===e[t]){var r=document.querySelector(t);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}e[t]=r}return e[t]}}(),i=[];function u(e){for(var t=-1,r=0;r<i.length;r++)if(i[r].identifier===e){t=r;break}return t}function a(e,t){for(var r={},n=[],o=0;o<e.length;o++){var a=e[o],c=t.base?a[0]+t.base:a[0],f=r[c]||0,s="".concat(c," ").concat(f);r[c]=f+1;var l=u(s),d={css:a[1],media:a[2],sourceMap:a[3]};-1!==l?(i[l].references++,i[l].updater(d)):i.push({identifier:s,updater:v(d,t),references:1}),n.push(s)}return n}function c(e){var t=document.createElement("style"),n=e.attributes||{};if(void 0===n.nonce){var i=r.nc;i&&(n.nonce=i)}if(Object.keys(n).forEach((function(e){t.setAttribute(e,n[e])})),"function"==typeof e.insert)e.insert(t);else{var u=o(e.insert||"head");if(!u)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");u.appendChild(t)}return t}var f,s=(f=[],function(e,t){return f[e]=t,f.filter(Boolean).join("\n")});function l(e,t,r,n){var o=r?"":n.media?"@media ".concat(n.media," {").concat(n.css,"}"):n.css;if(e.styleSheet)e.styleSheet.cssText=s(t,o);else{var i=document.createTextNode(o),u=e.childNodes;u[t]&&e.removeChild(u[t]),u.length?e.insertBefore(i,u[t]):e.appendChild(i)}}function d(e,t,r){var n=r.css,o=r.media,i=r.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}var p=null,y=0;function v(e,t){var r,n,o;if(t.singleton){var i=y++;r=p||(p=c(t)),n=l.bind(null,r,i,!1),o=l.bind(null,r,i,!0)}else r=c(t),n=d.bind(null,r,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(r)};return n(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;n(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===n&&(n=Boolean(window&&document&&document.all&&!window.atob)),n));var r=a(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var n=0;n<r.length;n++){var o=u(r[n]);i[o].references--}for(var c=a(e,t),f=0;f<r.length;f++){var s=u(r[f]);0===i[s].references&&(i[s].updater(),i.splice(s,1))}r=c}}}},121:(e,t,r)=>{"use strict";r.d(t,{Z:()=>n}),e=r.hmd(e);const n=function(e){var t,r=e.Symbol;return"function"==typeof r?r.observable?t=r.observable:(t=r("observable"),r.observable=t):t="@@observable",t}("undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==r.g?r.g:e)},936:e=>{async function t(e,t,{method:r,body:n,...o}={}){let i;t&&(i={"Content-Type":"application/json"});const u={method:r,...o,headers:{...i,...o.headers}};if(n)if(t)u.body=JSON.stringify(n);else{const e=new FormData;for(const t in n)e.append(t,n[t]);u.body=e}let a;try{const t=await window.fetch(e,u);if(a=await t.json(),!t.ok)throw new Error(a.statusText);return a}catch(e){return Promise.reject(e.message||a)}}t.get=(e,r={})=>t(e,!0,{method:"GET",...r}),t.post=(e,r,n,o={})=>t(e,n,{method:"POST",body:r,...o}),t.put=(e,r,n,o={})=>t(e,n,{method:"PUT",body:r,...o}),t.del=(e,r,n,o={})=>t(e,n,{method:"DELETE",body:r,...o}),e.exports={client:t}},77:(e,t,r)=>{const{loadingAction:n,errorAction:o,registeredAction:i,removedAction:u,workersLoadedAction:a}=r(845),c=r(646);t.register=e=>async t=>{t(n());try{const r=await c.register(e);t(i(r))}catch(r){t(o(`gagal mendaftarkan ${e.name}`))}},t.remove=e=>async t=>{t(n());try{await c.remove(e),t(u(e))}catch(e){t(o("gagal menghapus pekerja"))}},t.getList=async e=>{e(n());try{const t=await c.list();e(a(t))}catch(t){e(o("gagal memuat daftar pekerja"))}}},480:(e,t)=>{t.SERVICE_BASEURL="http://localhost:7001"},796:(e,t,r)=>{const{SERVICE_BASEURL:n}=r(480);e.exports={initialState:{loading:!1,error:null,workers:[]},registered:function(e,t){const r=t.payload;return e.workers.push({id:r.id,name:r.name,photo:`${n}/photo/${r.photo}`,bio:r.bio}),e.loading=!1,e.error=null,e},removed:function(e,t){const r=e.workers.findIndex((e=>e.id===t.payload));return e.workers.splice(r,1),e.loading=!1,e.error=null,e},workersLoaded:function(e,t){return e.workers=t.payload.map((e=>({id:e.id,name:e.name,photo:`${n}/photo/${e.photo}`,bio:e.bio}))),e.loading=!1,e.error=null,e},error:function(e,t){e.loading=!1,e.error=t.payload},loading:function(e){e.loading=!0,e.error=null},clearError:function(e){e.error=null}}},845:(e,t,r)=>{const{createAction:n,createReducer:o,configureStore:i}=r(819),{initialState:u,error:a,loading:c,registered:f,removed:s,workersLoaded:l,clearError:d}=r(796),p=r(894),y=n("error"),v=n("loading"),h=n("registered"),b=n("removed"),g=n("workersLoaded"),m=n("clearError"),w=i({reducer:o(u,{[y]:a,[m]:d,[v]:c,[h]:f,[b]:s,[g]:l}),middleware:[p.default]});e.exports={store$:w,errorAction:y,loadingAction:v,registeredAction:h,removedAction:b,workersLoadedAction:g,clearErrorAction:m}},646:(e,t,r)=>{const{client:n}=r(936),{SERVICE_BASEURL:o}=r(480);e.exports={register:function(e){return n.post(`${o}/register`,e)},list:function(){return n.get(`${o}/list`)},remove:function(e){return n.del(`${o}/remove?id=${e}`)},info:function(e){return n.get(`${o}/info?id=${e}`)}}}},t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={id:n,loaded:!1,exports:{}};return e[n](o,o.exports,r),o.loaded=!0,o.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.hmd=e=>((e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{const{register:e,getList:t,remove:n}=r(77),{store$:o,errorAction:i,clearErrorAction:u}=r(845);r(346);const a=document.getElementById("form"),c=document.getElementById("name"),f=document.getElementById("age"),s=document.getElementById("photo"),l=document.getElementById("bio"),d=document.getElementById("address"),p=document.getElementById("list"),y=document.getElementById("error-text"),v=document.getElementById("loading-text");function h(e){e.error?y.textContent=e.error.toString():y.textContent="",e.loading?v.style="":v.style="display:none;",p.innerHTML="";for(let t=0;t<e.workers.length;t++){const r=e.workers[t],i=document.createElement("div"),u=document.createElement("button");u.innerText="hapus",u.onclick=function(){o.dispatch(n(r.id))},i.innerHTML=`\n      <img src="${r.photo}" alt="" width="30px" height="30px" />\n      <span>${r.name}</span>\n    `,i.append(u),p.append(i)}}a.onsubmit=t=>{t.preventDefault(),o.dispatch(u()),c.value&&f.value&&s.files[0]&&l.value&&d.value?(o.dispatch(e({name:c.value,photo:s.files[0],age:f.value,bio:l.value,address:d.value})),a.reset()):o.dispatch(i("form isian tidak lengkap!"))},o.subscribe((()=>{h(o.getState())})),h(o.getState()),o.dispatch(t)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,